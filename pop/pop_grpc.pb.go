// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: pop.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// POPServiceClient is the client API for POPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type POPServiceClient interface {
	ValidatePermission(ctx context.Context, in *Web3WalletPermission, opts ...grpc.CallOption) (*P2PConnectionStatus, error)
	SyncWalletData(ctx context.Context, in *Web3WalletPermission, opts ...grpc.CallOption) (POPService_SyncWalletDataClient, error)
	UploadWalletKeys(ctx context.Context, in *RubixWalletData, opts ...grpc.CallOption) (*Web3WalletPermission, error)
	InvalidatePermission(ctx context.Context, in *Web3WalletPermission, opts ...grpc.CallOption) (*P2PConnectionStatus, error)
	InitRubixTxn(ctx context.Context, in *TxnPayload, opts ...grpc.CallOption) (POPService_InitRubixTxnClient, error)
	WalletNotification(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (POPService_WalletNotificationClient, error)
}

type pOPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPOPServiceClient(cc grpc.ClientConnInterface) POPServiceClient {
	return &pOPServiceClient{cc}
}

func (c *pOPServiceClient) ValidatePermission(ctx context.Context, in *Web3WalletPermission, opts ...grpc.CallOption) (*P2PConnectionStatus, error) {
	out := new(P2PConnectionStatus)
	err := c.cc.Invoke(ctx, "/protos.POPService/ValidatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOPServiceClient) SyncWalletData(ctx context.Context, in *Web3WalletPermission, opts ...grpc.CallOption) (POPService_SyncWalletDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &POPService_ServiceDesc.Streams[0], "/protos.POPService/SyncWalletData", opts...)
	if err != nil {
		return nil, err
	}
	x := &pOPServiceSyncWalletDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type POPService_SyncWalletDataClient interface {
	Recv() (*RubixWalletData, error)
	grpc.ClientStream
}

type pOPServiceSyncWalletDataClient struct {
	grpc.ClientStream
}

func (x *pOPServiceSyncWalletDataClient) Recv() (*RubixWalletData, error) {
	m := new(RubixWalletData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pOPServiceClient) UploadWalletKeys(ctx context.Context, in *RubixWalletData, opts ...grpc.CallOption) (*Web3WalletPermission, error) {
	out := new(Web3WalletPermission)
	err := c.cc.Invoke(ctx, "/protos.POPService/UploadWalletKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOPServiceClient) InvalidatePermission(ctx context.Context, in *Web3WalletPermission, opts ...grpc.CallOption) (*P2PConnectionStatus, error) {
	out := new(P2PConnectionStatus)
	err := c.cc.Invoke(ctx, "/protos.POPService/InvalidatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOPServiceClient) InitRubixTxn(ctx context.Context, in *TxnPayload, opts ...grpc.CallOption) (POPService_InitRubixTxnClient, error) {
	stream, err := c.cc.NewStream(ctx, &POPService_ServiceDesc.Streams[1], "/protos.POPService/InitRubixTxn", opts...)
	if err != nil {
		return nil, err
	}
	x := &pOPServiceInitRubixTxnClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type POPService_InitRubixTxnClient interface {
	Recv() (*TxnStatus, error)
	grpc.ClientStream
}

type pOPServiceInitRubixTxnClient struct {
	grpc.ClientStream
}

func (x *pOPServiceInitRubixTxnClient) Recv() (*TxnStatus, error) {
	m := new(TxnStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pOPServiceClient) WalletNotification(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (POPService_WalletNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &POPService_ServiceDesc.Streams[2], "/protos.POPService/WalletNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &pOPServiceWalletNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type POPService_WalletNotificationClient interface {
	Recv() (*PushNotification, error)
	grpc.ClientStream
}

type pOPServiceWalletNotificationClient struct {
	grpc.ClientStream
}

func (x *pOPServiceWalletNotificationClient) Recv() (*PushNotification, error) {
	m := new(PushNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// POPServiceServer is the server API for POPService service.
// All implementations must embed UnimplementedPOPServiceServer
// for forward compatibility
type POPServiceServer interface {
	ValidatePermission(context.Context, *Web3WalletPermission) (*P2PConnectionStatus, error)
	SyncWalletData(*Web3WalletPermission, POPService_SyncWalletDataServer) error
	UploadWalletKeys(context.Context, *RubixWalletData) (*Web3WalletPermission, error)
	InvalidatePermission(context.Context, *Web3WalletPermission) (*P2PConnectionStatus, error)
	InitRubixTxn(*TxnPayload, POPService_InitRubixTxnServer) error
	WalletNotification(*emptypb.Empty, POPService_WalletNotificationServer) error
	mustEmbedUnimplementedPOPServiceServer()
}

// UnimplementedPOPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPOPServiceServer struct {
}

func (UnimplementedPOPServiceServer) ValidatePermission(context.Context, *Web3WalletPermission) (*P2PConnectionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePermission not implemented")
}
func (UnimplementedPOPServiceServer) SyncWalletData(*Web3WalletPermission, POPService_SyncWalletDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncWalletData not implemented")
}
func (UnimplementedPOPServiceServer) UploadWalletKeys(context.Context, *RubixWalletData) (*Web3WalletPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadWalletKeys not implemented")
}
func (UnimplementedPOPServiceServer) InvalidatePermission(context.Context, *Web3WalletPermission) (*P2PConnectionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidatePermission not implemented")
}
func (UnimplementedPOPServiceServer) InitRubixTxn(*TxnPayload, POPService_InitRubixTxnServer) error {
	return status.Errorf(codes.Unimplemented, "method InitRubixTxn not implemented")
}
func (UnimplementedPOPServiceServer) WalletNotification(*emptypb.Empty, POPService_WalletNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method WalletNotification not implemented")
}
func (UnimplementedPOPServiceServer) mustEmbedUnimplementedPOPServiceServer() {}

// UnsafePOPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to POPServiceServer will
// result in compilation errors.
type UnsafePOPServiceServer interface {
	mustEmbedUnimplementedPOPServiceServer()
}

func RegisterPOPServiceServer(s grpc.ServiceRegistrar, srv POPServiceServer) {
	s.RegisterService(&POPService_ServiceDesc, srv)
}

func _POPService_ValidatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Web3WalletPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POPServiceServer).ValidatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.POPService/ValidatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POPServiceServer).ValidatePermission(ctx, req.(*Web3WalletPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _POPService_SyncWalletData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Web3WalletPermission)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(POPServiceServer).SyncWalletData(m, &pOPServiceSyncWalletDataServer{stream})
}

type POPService_SyncWalletDataServer interface {
	Send(*RubixWalletData) error
	grpc.ServerStream
}

type pOPServiceSyncWalletDataServer struct {
	grpc.ServerStream
}

func (x *pOPServiceSyncWalletDataServer) Send(m *RubixWalletData) error {
	return x.ServerStream.SendMsg(m)
}

func _POPService_UploadWalletKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RubixWalletData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POPServiceServer).UploadWalletKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.POPService/UploadWalletKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POPServiceServer).UploadWalletKeys(ctx, req.(*RubixWalletData))
	}
	return interceptor(ctx, in, info, handler)
}

func _POPService_InvalidatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Web3WalletPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POPServiceServer).InvalidatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.POPService/InvalidatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POPServiceServer).InvalidatePermission(ctx, req.(*Web3WalletPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _POPService_InitRubixTxn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxnPayload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(POPServiceServer).InitRubixTxn(m, &pOPServiceInitRubixTxnServer{stream})
}

type POPService_InitRubixTxnServer interface {
	Send(*TxnStatus) error
	grpc.ServerStream
}

type pOPServiceInitRubixTxnServer struct {
	grpc.ServerStream
}

func (x *pOPServiceInitRubixTxnServer) Send(m *TxnStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _POPService_WalletNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(POPServiceServer).WalletNotification(m, &pOPServiceWalletNotificationServer{stream})
}

type POPService_WalletNotificationServer interface {
	Send(*PushNotification) error
	grpc.ServerStream
}

type pOPServiceWalletNotificationServer struct {
	grpc.ServerStream
}

func (x *pOPServiceWalletNotificationServer) Send(m *PushNotification) error {
	return x.ServerStream.SendMsg(m)
}

// POPService_ServiceDesc is the grpc.ServiceDesc for POPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var POPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.POPService",
	HandlerType: (*POPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidatePermission",
			Handler:    _POPService_ValidatePermission_Handler,
		},
		{
			MethodName: "UploadWalletKeys",
			Handler:    _POPService_UploadWalletKeys_Handler,
		},
		{
			MethodName: "InvalidatePermission",
			Handler:    _POPService_InvalidatePermission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncWalletData",
			Handler:       _POPService_SyncWalletData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InitRubixTxn",
			Handler:       _POPService_InitRubixTxn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WalletNotification",
			Handler:       _POPService_WalletNotification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pop.proto",
}
