syntax = "proto3";

package protos;

option go_package = "github.com/getfexr/protos";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message SignedPayload {
  string payload = 1;
  bytes signature = 2;
}

message ChallengeReq {
  string publicKey = 1;
}

message ChallengeString {
  string challenge = 1;
}

message Token {
  string accessToken = 1;
  google.protobuf.Timestamp expiry = 2;
}

message CreateDIDReq {
  string didImage = 1;
  string publicShare = 2;
  string publicKey = 3;

  // For sky's verification
  SignedPayload ecdsaChallengeResponse = 4;
}

message CreateDIDRes {
  string did = 1;
  bool status = 2;

  // For Rubix DID access via sky
  Token accessToken = 3;
}

message RequestTransactionPayloadReq {
  string receiver = 1;
  double tokenCount = 3;
  string comment = 4;
  int32 type = 5;
}

message RequestTransactionPayloadRes {
  string requestId = 1;
  string hash = 2;
}

message HashSigned {
  string id = 1;
  bytes pvtSign = 2;
  bytes imgSign = 3;
}

message Status {
  bool status = 1;
}

message GenerateReq {
  double tokenCount = 1;
  string did = 2;
}

message GetBalanceRes {
  double balance = 1;
}

message IncomingTxnDetails {
  string txnId = 1;
  string sender = 2;
  string receiver = 3;
  double amount = 4;
  string comment = 5;
  int32 type = 6;
  google.protobuf.Timestamp timestamp = 7;
  string tickerName = 8;
  double gas = 9;
}

service RubixService {
  rpc CreateDIDChallenge (ChallengeReq) returns (ChallengeString) {}
  rpc CreateDID (CreateDIDReq) returns (CreateDIDRes) {}
  rpc InitiateTransaction (RequestTransactionPayloadReq) returns (RequestTransactionPayloadRes) {}
  rpc StreamIncomingTxn (google.protobuf.Empty) returns (stream IncomingTxnDetails) {}
  rpc SignResponse (HashSigned) returns (Status) {}
  rpc GenerateRbt (GenerateReq) returns (RequestTransactionPayloadRes) {}
  rpc GetBalance (google.protobuf.Empty) returns (GetBalanceRes) {}
  rpc GetAccessTokenChallenge (google.protobuf.Empty) returns (ChallengeString) {}
  rpc GenerateAccessToken(SignedPayload) returns (Token) {}
}
