syntax = "proto3";

package protos;

option go_package = "github.com/getfexr/protos";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message SignedPayload {
  string payload = 1;
  bytes signature = 2;
}

message ChallengeReq {
  string did = 1;
}

message AccessReq {
  string did = 1;
  string password = 2;
  SignedPayload payload = 3;
}

message ChallengeResp {
  string challenge = 1;
}

message Token {
  string accessToken = 1;
  google.protobuf.Timestamp expiry = 2;
}

message CreateDIDReq {
  int32 didMode = 1;
  string privKeyPwd = 2;
  string quorumKeyPwd = 3;
  string secret = 4;
  string didImage = 5;
  string publicShare = 6;
  string publicKey = 7;
  string masterDid = 8;
  // For sky's verification
  SignedPayload ecdsaChallengeResponse = 9;
}

message CreateDIDRes {
  string did = 1;
  bool status = 2;

  // For Rubix DID access via sky
  Token accessToken = 3;
}

message TransferRBTReq {
  int32 type = 1;
  string receiver = 2;
  double tokenCount = 3;
  string comment = 4;
}

message RequestTransactionPayloadRes {
  string requestId = 1;
  string hash = 2;
}

message HashSigned {
  string id = 1;
  bytes pvtSign = 2;
  bytes imgSign = 3;
}

message Status {
  bool status = 1;
}

message GenerateReq {
  double tokenCount = 1;
  string did = 2;
}

message GenerateResp {
  repeated string tokens = 1;
}

message GetBalanceRes {
  double balance = 1;
}

message SignRequest {
  string reqID = 1;
  int32 mode = 2;
  bytes hash = 3;
  bool onlyPrivKey = 4;
}

message SignResponse {
  string reqID = 1;
  int32 mode = 2;
  string password = 3;
  bytes imgSign = 4;
  bytes pvtSign = 5;
}

message BasicReponse {
  bool status = 1;
  string message = 2;
  bool signNeeded = 3;
  SignRequest signRequest = 4;
}

message DataTokenReq {
  string userID = 1;
  string userInfo = 2;
  string fileInfo = 3;
  string committerDID = 4;
  string batchID = 5;
}

message TokenReq {
  string tokenType = 1;
}

message TokenDetial {
  string token = 1;
  int32 tokenState = 2;
}

message TokenResp {
  repeated TokenDetial tokenDetials = 1;
}


message CommitDataTokenReq {
  string batchID = 1;
}

message IncomingTxnDetails {
  string txnId = 1;
  string sender = 2;
  string receiver = 3;
  double amount = 4;
  string comment = 5;
  int32 type = 6;
  google.protobuf.Timestamp timestamp = 7;
  string tickerName = 8;
  double gas = 9;
}

message TransactionDetails {
  string transactionId = 1;
  string transactionType = 2;
  string blockId = 3;
  int32 mode = 4;
  string senderDID = 5;
  string receiverDID = 6;
  double amount = 7;
  double totalTime = 8;
  string comment = 9;
  google.protobuf.Timestamp dateTime = 10;
  bool status = 11;
}

message TransactionHistory {
  repeated TransactionDetails transactions = 1;
  string error = 2;
}

service RubixService {
  rpc GetDIDChallenge (ChallengeReq) returns (ChallengeResp) {}
  rpc GetDIDAccess (AccessReq) returns (Token) {}
  rpc CreateDID (CreateDIDReq) returns (CreateDIDRes) {}
  rpc GetAllTokens (TokenReq) returns (TokenResp) {}
  rpc TransferRBT (TransferRBTReq) returns (BasicReponse) {}
  rpc CreateDataToken (DataTokenReq) returns (BasicReponse) {}
  rpc CommitDataToken (CommitDataTokenReq) returns (BasicReponse) {}
  rpc StreamIncomingTxn (google.protobuf.Empty) returns (stream IncomingTxnDetails) {}
  rpc StreamSignature (stream SignResponse) returns (stream BasicReponse) {}
  rpc GenerateRBT (GenerateReq) returns (BasicReponse) {}
  rpc GetBalance (google.protobuf.Empty) returns (GetBalanceRes) {}
  rpc GetTransactionHistory(google.protobuf.Empty) returns (TransactionHistory) {}
}
